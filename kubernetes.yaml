apiVersion: v1
kind: PersistentVolume
metadata:
  name: incoming-data-records-pv
  labels:
    type: local
spec:
  storageClassName: incoming-data-records-storage
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 500Mi
  hostPath:
    path: "/data/mobilecs/incoming-data-records"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: incoming-data-records-pvc
spec:
  storageClassName: incoming-data-records-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 250Mi
      # cpu: "500m"
    limits:
      storage: 500Mi
      # cpu: "1000m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: backend
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  strategy: { }
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: mobilecs-backend
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: incoming-data-records-volume
              mountPath: /mobilecs/incoming-data-records
          env:
            - name: SPRING_DATA_CASSANDRA_CONTACT_POINTS
              value: "cassandra-service"
            - name: SPRING_DATA_CASSANDRA_PORT
              value: "9042"
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "kafka-service:29092"
            - name: MOBILECS_INCOMING_DATA_RECORDS_DIR
              value: "/mobilecs/incoming-data-records"
          resources:
            requests:
              memory: "250Mi"
              # cpu: "250m"
            limits:
              memory: "500Mi"
              # cpu: "500m"
          livenessProbe:
            httpGet:
              port: 8080
              path: /actuator/health/liveness
            initialDelaySeconds: 10
            periodSeconds: 7
            timeoutSeconds: 7
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 7
            failureThreshold: 5
      volumes:
        - name: incoming-data-records-volume
          persistentVolumeClaim:
            claimName: incoming-data-records-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: cassandra-service
spec:
  clusterIP: None
  ports:
    - name: "9042"
      port: 9042
      targetPort: 9042
  selector:
    app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra-statefulset
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 1
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      terminationGracePeriodSeconds: 1800
      containers:
        - name: cassandra
          image: cassandra:3.11.8
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9042
          volumeMounts:
            - name: cassandra-data
              mountPath: /var/lib/cassandra
          env:
            - name: MAX_HEAP_SIZE
              value: "500M"
            - name: HEAP_NEWSIZE
              value: "100M"
          resources:
            requests:
              memory: "750Mi"
              # cpu: "500m"
            limits:
              memory: "750Mi"
              # cpu: "500m"
  volumeClaimTemplates:
    - metadata:
        name: cassandra-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  clusterIP: None
  ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper-statefulset
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:5.4.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2181
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper/data
            - name: zookeeper-log
              mountPath: /var/lib/zookeeper/log
          env:
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx200M -Xms200M"
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          resources:
            requests:
              memory: "256Mi"
              # cpu: "500m"
            limits:
              memory: "256Mi"
              # cpu: "500m"
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 500Mi
    - metadata:
        name: zookeeper-log
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  type: ClusterIP
  clusterIP: None # headless service
  ports:
    - name: "29092"
      port: 29092
      targetPort: 29092
  selector:
    app: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-statefulset
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:5.4.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 29092
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
          env:
            - name: KAFKA_HEAP_OPTS
              value: "-Xmx400M -Xms400M"
            - name: KAFKA_BROKER_ID
              value: "0"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-service:2181"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://:29092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://kafka-service:29092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,LOCAL:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_LOG_RETENTION_MS
              value: "-1"
          resources:
            requests:
              memory: "1024Mi"
              # cpu: "500m"
            limits:
              memory: "1024Mi"
              # cpu: "500m"
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: standard
        resources:
          requests:
            storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: jobmanager-service
spec:
  type: ClusterIP
  ports:
    - name: rpc
      port: 6123
    - name: blob-server
      port: 6124
    - name: webui
      port: 8081
  selector:
    app: jobmanager
---
apiVersion: v1
kind: Service
metadata:
  name: jobmanager-rest-service
spec:
  type: NodePort
  ports:
    - name: rest
      port: 8081
      targetPort: 8081
      nodePort: 30081
  selector:
    app: jobmanager
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flink-config
data:
  FLINK_PROPERTIES: |
    jobmanager.rpc.address: jobmanager-service
    jobmanager.rpc.port: 6123
    jobmanager.memory.process.size: 1600m
    taskmanager.rpc.port: 6122
    taskmanager.numberOfTaskSlots: 2
    taskmanager.memory.process.size: 1728m
  CASSANDRA_CONTACT_POINT: "cassandra-service"
  KAFKA_BOOTSTRAP_SERVERS: "kafka-service:29092"
  MOBILECS_INCOMING_DATA_RECORDS_DIR: "/mobilecs/incoming-data-records"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jobmanager-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jobmanager
  template:
    metadata:
      labels:
        app: jobmanager
    spec:
      containers:
        - name: jobmanager
          image: mobilecs-flink
          imagePullPolicy: IfNotPresent
          args: [ "jobmanager" ]
          ports:
            - containerPort: 6123
              name: rpc
            - containerPort: 6124
              name: blob-server
            - containerPort: 8081
              name: webui
          env:
            - name: INITIAL_JOBS
              value: >
                com.hclc.mobilecs.flink.importing.IncomingDataRecordsImporter;flink-0.0.1-SNAPSHOT.jar
                com.hclc.mobilecs.flink.ingesting.IncomingDataRecordsIngester;flink-0.0.1-SNAPSHOT.jar
            - name: INITIAL_JOBS_DIR
              value: "/mobilecs/flink-jobs"
            - name: INITIAL_JOBS_DELAY
              value: "20"
            - name: INITIAL_JOBS_PERIOD
              value: "5"
            - name: INITIAL_JOBS_JOBMANAGER
              value: "localhost:8081"
          envFrom:
            - configMapRef:
                name: flink-config
          resources:
            requests:
              memory: "1600Mi"
              # cpu: "500m"
            limits:
              memory: "1600Mi"
              # cpu: "500m"
          livenessProbe:
            tcpSocket:
              port: 6123
            initialDelaySeconds: 30
            periodSeconds: 60
          volumeMounts:
            - name: incoming-data-records-volume
              mountPath: /mobilecs/incoming-data-records
          securityContext:
            runAsUser: 9999  # refers to user _flink_ from official flink image, change if necessary
      volumes:
        - name: incoming-data-records-volume
          persistentVolumeClaim:
            claimName: incoming-data-records-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: taskmanager-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: taskmanager
  strategy: { }
  template:
    metadata:
      labels:
        app: taskmanager
    spec:
      containers:
        - name: taskmanager
          image: flink:1.11.2-scala_2.11-java11
          imagePullPolicy: IfNotPresent
          args: [ "taskmanager" ]
          ports:
            - containerPort: 6122
              name: rpc
            - containerPort: 6125
              name: query-state
          envFrom:
            - configMapRef:
                name: flink-config
          livenessProbe:
            tcpSocket:
              port: 6122
            initialDelaySeconds: 30
            periodSeconds: 60
          volumeMounts:
            - name: incoming-data-records-volume
              mountPath: /mobilecs/incoming-data-records
          resources:
            requests:
              memory: "1728Mi"
              # cpu: "500m"
            limits:
              memory: "1728Mi"
              # cpu: "500m"
      volumes:
        - name: incoming-data-records-volume
          persistentVolumeClaim:
            claimName: incoming-data-records-pvc
